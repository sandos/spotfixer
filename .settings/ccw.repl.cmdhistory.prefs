cmdhistory=[";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" ";; Switching to fixer.core namespace" "(clojure.core/in-ns 'fixer.core)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(fetch-url \\"http\://www.google.com\\")" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(get \\"majs\\" {\\"majs\\" 1})" "(get \\"majs\\" {\:\\"majs\\" 1})" "(get \\"majs\\" {\\"majs\\"\: 1})" "(get \\"majs\\" {\\"majs\\" 1})" "(get {\:1 1} \:1)" "(\:1 {\:1 1})" "(get-in {\:1 1} [\:1])" "(get-in {\:1 {\:skit 2}} [\:1 \:skit])" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(\:track a)" "a" "(first a)" "(second a)" "(first a)" "a" "(get-in (first a) \:track)" "(get-in a \:track)" "a" "(get a \:track)" "(get a 0)" "(get a 1)" "(get-in a [1])" "(get-in a [0])" "(get-in (first a) [0])" "(get-in (first a) \:track)" "a" "(first a)" "(first (first a))" "(first a)" "a" "(\: a)" "(nil a)" "(null a)" "(get a nil)" "(first a)" "(into {} (first a))" "(first a)" "(doseq [x (first a)]\\n  (prn x))" "(second (first a))" "(\:name(second (first a)))" "(\:length (second (first a)))" "(second (first a))" ";; Switching to fixer.core namespace" "(first a)" "a" "(into [] (.split (slurp \\"names\\") \\"\\\\n\\"))" "(map \\r\\n                \#(.substring % 4 26)\\r\\n                (into [] (.split (slurp \\"names\\") \\"\\\\n\\"))\\r\\n                )" "a" "(doseq [x a]\\n  (prn x))" "(doseq [x a]\\n  (prn (get-in x [1])))" "(doseq [x a]\\n  (prn (get-in x [\:])))" "(doseq [x a]\\n  (prn (get-in x [\:1])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\:1])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"album\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" ])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))\\n\\n(get-in x [\\"track\\" \\"name\\"])" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))\\n\\n(firt a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))\\n\\n(first a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0])))\\n\\n(firt a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])))\\n\\n(firt a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])))\\n\\n(first a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])\\n       (get-in x [\\"track\\" \\"album\\" \\"released\\"])))\\n\\n(first a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])\\n       (get-in x [\\"track\\" \\"album\\" \\"name\\"])\\r\\n       (get-in x [\\"track\\" \\"album\\" \\"released\\"])\\r\\n       ))\\n\\n(first a)" ";; Switching to fixer.core namespace" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" ";; Switching to fixer.core namespace" "(clojure.core/in-ns 'fixer.core)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "first a" "(first a)\u00A8" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(first a)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(first a)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(filter \#(.equals (nth % 5) \\"61fUybL3XS40gcffnnNPoX\\") b)" "(first b)" "b" "a"]
eclipse.preferences.version=1
