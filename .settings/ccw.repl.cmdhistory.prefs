cmdhistory=[";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" ";; Switching to fixer.core namespace" "(clojure.core/in-ns 'fixer.core)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(fetch-url \\"http\://www.google.com\\")" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(get \\"majs\\" {\\"majs\\" 1})" "(get \\"majs\\" {\:\\"majs\\" 1})" "(get \\"majs\\" {\\"majs\\"\: 1})" "(get \\"majs\\" {\\"majs\\" 1})" "(get {\:1 1} \:1)" "(\:1 {\:1 1})" "(get-in {\:1 1} [\:1])" "(get-in {\:1 {\:skit 2}} [\:1 \:skit])" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(\:track a)" "a" "(first a)" "(second a)" "(first a)" "a" "(get-in (first a) \:track)" "(get-in a \:track)" "a" "(get a \:track)" "(get a 0)" "(get a 1)" "(get-in a [1])" "(get-in a [0])" "(get-in (first a) [0])" "(get-in (first a) \:track)" "a" "(first a)" "(first (first a))" "(first a)" "a" "(\: a)" "(nil a)" "(null a)" "(get a nil)" "(first a)" "(into {} (first a))" "(first a)" "(doseq [x (first a)]\\n  (prn x))" "(second (first a))" "(\:name(second (first a)))" "(\:length (second (first a)))" "(second (first a))" ";; Switching to fixer.core namespace" "(first a)" "a" "(into [] (.split (slurp \\"names\\") \\"\\\\n\\"))" "(map \\r\\n                \#(.substring % 4 26)\\r\\n                (into [] (.split (slurp \\"names\\") \\"\\\\n\\"))\\r\\n                )" "a" "(doseq [x a]\\n  (prn x))" "(doseq [x a]\\n  (prn (get-in x [1])))" "(doseq [x a]\\n  (prn (get-in x [\:])))" "(doseq [x a]\\n  (prn (get-in x [\:1])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\:1])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"album\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" ])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])))" "(first a)\\n\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))\\n\\n(get-in x [\\"track\\" \\"name\\"])" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))\\n\\n(firt a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\"])))\\n\\n(first a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0])))\\n\\n(firt a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])))\\n\\n(firt a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])))\\n\\n(first a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])\\n       (get-in x [\\"track\\" \\"album\\" \\"released\\"])))\\n\\n(first a)" "\\n(doseq [x a]\\n  (prn (get-in x [\\"track\\" \\"name\\"])\\n       (get-in x [\\"track\\" \\"track-number\\"])\\n       (get-in x [\\"track\\" \\"artists\\" 0 \\"name\\"])\\n       (get-in x [\\"track\\" \\"album\\" \\"name\\"])\\r\\n       (get-in x [\\"track\\" \\"album\\" \\"released\\"])\\r\\n       ))\\n\\n(first a)" ";; Switching to fixer.core namespace" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" ";; Switching to fixer.core namespace" "(clojure.core/in-ns 'fixer.core)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "first a" "(first a)\u00A8" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(first a)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(first a)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" "(filter \#(.equals (nth % 5) \\"61fUybL3XS40gcffnnNPoX\\") b)" "(first b)" "b" "a" ";; Switching to fixer.core namespace" "(first b)" "(first a)" "(first b)" "(merge {\\"asd\\" \\"aswdasd\\"} {})" "{1 2}" "{1 (+ 3 4)}" "(first b)" "(defn majs {})" "(majs)" "(first b)" "(filter \#(.equals (\\"artist\\" %) \\"Linkin Park\\") b)" "(filter \#(.equals (get % \\"artist\\") \\"Linkin Park\\") b)" "doseq [x (filter \#(.equals (get % \\"artist\\") \\"Linkin Park0\\") b)]" "(doseq [x (filter \#(.equals (get % \\"artist\\") \\"Linkin Park0\\") b)]\\n  (prn x))" "(doseq [x b]\\n  prn x)" "(doseq [x b]\\n  (prn x))" "(map \#(str \\"TITLE\=\\" (\\"track\\" %) (\\"\\")) b)" "(map \#(str \\"TITLE\=\\" (% \\"track\\") (% \\"\\")) b)" "(map \#(str \\"TITLE\=\\" (% \\"track\\") (% \\"\\") \\"\\\\n\\") b)" "doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\n\\" (% \\"\\") \\"\\\\n\\") b)]" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\n\\" (% \\"\\") \\"\\\\n\\") b)]\\n  (prn x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") '\\\\n' (% \\"\\") \\"\\\\n\\") b)]\\n  (prn x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\n\\" (% \\"\\") \\"\\\\n\\") b)]\\n  (print x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\nALBUM\=\\" (% \\"album\\") \\"\\\\n\\") b)]\\n  (print x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\nALBUM\=\\" (% \\"album\\") \\"\\\\nTRACKNUMBER\=\\" (\\"nr\\" %)) b)]\\n  (print x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\nALBUM\=\\" (% \\"album\\") \\"\\\\nTRACKNUMBER\=\\" (% \\"nr\\")) b)]\\n  (print x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\nALBUM\=\\" (% \\"album\\") \\"\\\\nTRACKNUMBER\=\\" (% \\"nr\\")) b)]\\n  (println x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\nALBUM\=\\" (% \\"album\\") \\"\\\\nTRACKNUMBER\=\\" (% \\"nr\\") \\"\\\\nYEAR\=\\" (% \\"year\\")) b)]\\n  (print x))" "(doseq [x (map \#(str \\"TITLE\=\\" (% \\"track\\") \\"\\\\nALBUM\=\\" (% \\"album\\") \\"\\\\nTRACKNUMBER\=\\" (% \\"nr\\") \\"\\\\nYEAR\=\\" (% \\"year\\") \\"\\\\n\\") b)]\\n  (print x))" "(doseq [x tags]\\n  (prn x))" "(doseq [x tags]\\n  (print x))" "(doseq [x (first tags)]\\n  (print x))" "(doseq [x (first tags)]\\n  (spit x))" "(doseq [x (first tags)]\\n  (print x))" "(doseq [x (first tags)]\\n  (print x[0]))" "(doseq [x (first tags)]\\n  (print (get x 0)))" "(doseq [x (first tags)]\\n  (print (first x)))" "(doseq [x (first tags)]\\n  (prn (first x)))" "(doseq [x (first tags)]\\n  (prn x))" "tags" "(first tags)" "(first (first tags))" "(doseq [x (first tags)]\\n  (prn x))" "(doseq [x tags]\\n  (prn (first x)))" "(doseq [x tags]\\n  (prn (second x)))" "(doseq [x tags]\\n  (spit (second x) (first x)))" "(map \#(vec (list\\r\\n                  (str \\"vorbiscomment -w -c tags\\" (% \\"ID\\"))\\r\\n                  )) b)" "(map \#(vec (list\\r\\n                  (str \\"vorbiscomment -w -c tags\\" (% \\"ID\\") \\"dump\\" (% \\"ID\\"))\\r\\n                  )) b)" "cmds" "(doseq [x cmds]\\n  (print x))" "(doseq [x cmds]\\n  (println x))" "(concat cmds)" "(reduce str cmds)" "(reduce \#(str) cmds)" "(reduce str cmds)" "(print )(reduce str cmds)" "(print (reduce str cmds))" "(spit \\"e.e\\" (reduce str cmds))" ";; Switching to fixer.core namespace" "\\r\\n(map \#(str \\"sox dump\\" (% \\"ID\\") \\" -C -6.0 out\\" (% \\"ID\\") \\"\\\\n\\") b)" "(spit \\"e.e\\" (reduce str encodecmds))" "(def renamecmds (map \#(str \\"mv dump\\" (% \\"ID\\") \\".mp3\\" (% \\"track\\") \\".mp3\\\\n\\") b))" "(spit \\"e.e\\" (reduce str renamecmds))" "(map \#(str \\"mv dump\\" (% \\"ID\\") \\".mp3\\" (% \\"track\\") \\".mp3\\\\n\\") b)" "(map \#(str \\"mv dump\\" (% \\"ID\\") \\".mp3 \\" (% \\"track\\") \\".mp3\\\\n\\") b)" "(map \#(str \\"mv dump\\" (% \\"ID\\") \\".mp3 \\" (fixname (% \\"track\\")) \\".mp3\\\\n\\") b)" "renamecmds" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" ";; Switching to fixer.core namespace" "(clojure.core/in-ns 'fixer.core)" "(doseq [x tags]\\r\\n  (spit (second x) (first x)))" " (reduce str cmds)" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (reduce str cmds)" " (doseq [x (reduce str cmds)]\\n   (print x))" "(doseq [x tags]\\r\\n  (spit (second x) (first x)))" " (reduce str cmds)" "(doseq [x tags]\\r\\n  (spit (second x) (first x)))" " (doseq [x (reduce str cmds)]\\n   (print x))" " (doseq [x (reduce str encodecmds)]\\n   (print x))" " (doseq [x (reduce str cmds)]\\n   (print x))" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))" ";; Loading file C\:\\\\Users\\\\sandos\\\\workspace\\\\fixer\\\\src\\\\fixer\\\\core.clj" " (doseq [x (reduce str renamecmds)]\\n   (print x))"]
eclipse.preferences.version=1
